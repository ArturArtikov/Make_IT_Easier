# -*- coding: utf-8 -*-
"""Занятие 26. 30.07.24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-iHR27ZjjpW2foPmTHOtAdmWfFQcC3C

# Списки в Python

## Определение

Списки в Python - упорядоченные изменяемые коллекции объектов произвольных типов. Создать список можно следующими способами:

1. Передать в переменную название класса в виде функции

```python3
list1 = list()
```

2. Передать в переменную две квадратных скобки

```python3
list2 = []
```

**Задание 1**

Создай список *list1*, передав в него название класса, после этого создай переменную *list2*, передав в нее квадратные скобки. Создай список чисел *list3*, передав в него название класса, внутри которого будет написан генератор *range()* для чисел от 0 до 10.
"""

list1 = list()
list2 = []
list3 = list(range(-10, 12, 2))

print(list1, list2, list3, sep='\n')

string = 'Это пример строки для работы с типами данных'
list1 = string.split()
print(list1)

result = '---'.join(list1)
print(result)

"""## Методы списков в Python

Аналогично с методами строк, в Python также реализуются методы списов. Их число сильно меньше числа методов строк. Ниже мы обсудим основные методы для работы со строками.

**list.append(x)**

Данный метод добавляет в наш список элеменд, переданный в **x**.
"""

list1 = [0, 12, 'string', 9]
print(list1)

list1.append('Hello, world!')
print(list1)

"""**list.clear()**

Очищает список от всех элементов
"""

list2 = [0, 1, 'Hello', 'Day', 55.89, 'Tomatos']
print(list2)

list2.clear()
list2.append(10)
print(list2)

"""**list.copy()**

Данный метод возвращает копию списка, это бывает нужно для того, чтобы не испортить список, если необзодимо сделать с ним какие-то манипуляции
"""

list3 = [0, 9, 12, 'Hello'] # Создали список
list3_1 = list3             # Вроде бы переписали в новую переменную
list3_1.clear()             # Очистили только новый список
print(list3_1, list3)       # Как видно оба списка стали пустыми

list3 = [0, 9, 12, 'Hello'] # Создали список
list3_1 = list3.copy()      # Создали копию
list3_1.append('World!')    # Очистили только новый список
print(list3_1, list3)       # Один список стал очищенным, а второй остался как прежде

"""**list.count(x)**

Метод возвращает число вхождений элемента **x** в список
"""

list4 = [1000, 1000, 10, 24, 15, 16.89, 'Hello', 1000]
count = list4.count(1000)
print(count)

"""**list.extend(iterable)**

Метод добавляет в список все элементы итерируемого объекта **iterable**
"""

list5 = list(range(10))
print(list5)

list5.extend(list(range(-10, -1, 2)))
print(list5)

list5.extend('World is Beautiful!')
print(list5)

list1 = list(range(4, 20, 3))
list1.extend(list(range(1, 10, 2)))

"""**list.index(x, start, end)**

Метод возвращает положение первого индекса, со значением х.

*start* и *end* - индексы начала и конца поиска соответственно

Если элемента нет в списке, то возникает ошибка
"""

list6 = [0, 10, 15, 20, 'Hello', [0, 1, 10], 'Buy!']
print(list6.index(15))

print(list6.index('Hello', -3))

print(list6.index(20, 1, 5))

"""**list.insert(i, x)**

Данный метод вставляет указанный элемент перед указанным индексом. **i** - индекс, **x** - элемент
"""

list7 = [1, 20, 95]
print(list7)

list7.insert(1, 'Hello')
print(list7)

list7.insert(-1, 100.0)
print(list7)

"""**list.pop(i)**

Удаляет элемент из списка по индексу и возвращает его. Если индекс не указан, то удаляется последний элемент
"""

list8 = list(range(19, 28, 2))
print(list8)

element = list8.pop(2)
print(element, list8)

element = list8.pop(-1)
print(element, list8)

element = list8.pop(-4)     # Ошибка, т.к. данного индекса не существует
print(element, list8)

"""**list.remove(x)**

Метод удаляет из списка элемент **x**, если элемента нет, то возникает ошибка.
"""

list9 = [0, 12, 19, 27, 90, 87.69, 'Hello!', 'May']
print(list9)

list9.remove(12)
print(list9)

list9.remove('Milk') # Та самая ошибка
print(list9)

"""**list.reverse()**

Данный метод возвращает список, записанный в обратном порядке следования элементов

"""

list10 = [0, 12, 83, 48.91, 'Element']
print(list10)

list10.reverse()
print(list10)

list10.append(['Hello', 12, 14.891])
list10.reverse()
print(list10)

list11 = [0, 12, 'Hello', 24.589, ['Meat', 0, 1234, 'Buy!']]
list11 = list11[::-1]
print(list11)

"""**list.sort(key=None, reverse=False)**

Данный метод производит сортировку элементов списка
*key* - функция, по которой ведется сортировка
*reverse* - флаг, если True, то сортировка будет в обратном порядке. По умолчанию False.


"""

list11 = [0, 102, 100, 90.901, 10.98, 101]
print(list11)

list11_1 = list11.copy()
list11_1.sort()
print(list11_1)

list11_2 = list11.copy()
list11_2.sort(reverse=True)
print(list11_2)

list11_3 = list11.copy()
list11_3.sort(key=lambda x: len(str(x)), reverse=True)
print(list11_3)

list2 = [1, 18, 109, 50.89, 18.9156]
list2.sort(key=lambda x: len(str(x))) # key - позволяет создать функцию для сортировки
print(list2)