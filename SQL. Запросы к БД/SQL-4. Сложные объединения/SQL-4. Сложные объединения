{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMK9fxkijjOqalriyu16hAt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# SQL-4. Сложные объединения\n","\n","## 1. Знакомимся с данными\n","\n","В данном блоке мы будем работать с данными о компании, организующей перевозки грузов. Интересующие нас данные хранятся в таблицах city, customer, driver, shipment, truck. Давайте внимательно их изучим.\n","\n","Ниже представлена ER-диаграмма (от англ. entity-relation, дословно — «сущность-связь»), которая отображает существующие связи между отдельными таблицами.\n","\n","![](https://lms-cdn.skillfactory.ru/assets/courseware/v1/5903f8fada18b9da7c7c31ce8477feb6/asset-v1:SkillFactory+DST-3.0+28FEB2021+type@asset+block/dst3-u2-md4_1_1.jpg)\n","\n","Таблица city — это справочник городов. Структура справочника:\n","\n","\n","| Название поля | Тип данных | Описание  |\n","|---------------|------------|-----------|\n","|city_id|integer|уникальный идентефикатор города|\n","|city_name |text   |название города   |\n","|state|text   |штат, к которому относится город   |\n","|population   |integer   |население   |\n","|area   |numeric   |площадь   |\n","\n","Таблица customer — это справочник клиентов. У компании, с данными которой мы работаем, только корпоративные клиенты, поэтому в таблице нет привычных данных о возрасте и поле. Справочник содержит следующие поля:\n","\n","| Название поля | Описание  |\n","|---------------|-----------|\n","|cust_id|уникальный идентефикатор клиента|\n","|cust_name |название клиента|\n","|annual_revence|ежегодная выручка|\n","|cust_type   |тип пользователя|\n","|address   |адрес|\n","|zip|почтовый индекс|\n","|phone|телефон|\n","|city_id|идентефикатор города (внешний ключ к таблице city)|\n","\n","Следующая таблица — driver — справочник водителей. Перечень сведений, содержащихся в таблице, представлен ниже\n","\n","| Название поля | Описание  |\n","|---------------|-----------|\n","|driver_id|уникальный идентефикатор водителя|\n","|first_name |имя водителя|\n","|last_name|фамилия водителя|\n","|address   |адрес водителя|\n","|zip_code|почтовый индекс водителя|\n","|phone|телефон водителя|\n","|city_id|идентефикатор города водителя (внешний ключ к таблице city)|\n","\n","В таблице truck хранится информация о грузовиках, на которых осуществляются перевозки. Данные о них представлены в следующем виде:\n","\n","| Название поля | Описание  |\n","|---------------|-----------|\n","|truck_id|уникальный идентефикатор грузовика|\n","|make |производитель грузовика|\n","|model_year|дата выпуска грузовика|\n","\n","Последняя таблица в датасете, shipment, — таблица с данными непосредственно о доставках. Она описывает взаимодействие всех перечисленных сущностей, а потому содержит наибольшее количество ссылок на другие таблицы.\n","\n","| Название поля | Описание  |\n","|---------------|-----------|\n","|ship_id|уникальный идентефикатор доставки|\n","|cust_id |идентефикатор клиента, которому отправлена доставка, ссылка на таблицу customer|\n","|weight|вес посылки|\n","|truck_id|идентефикатор грузовика, на которомм отправлена доставка, ссылка на таблицу truck|\n","|driver_id|идентификатор водителя, который осуществлял доставку, внешний ключ к таблице driver|\n","|city_id |идентификатор города в который совершена доставка, внешний ключ к таблице city|\n","|ship_date|дата доставки|\n","\n","Вопрос 1: Укажите название города с максимальным весом единичной доставки.\n","\n","```sql\n","select\n","    s.weight,\n","    c.city_name\n","from sql.shipment as s\n","     join sql.city as c on s.city_id = c.city_id\n","order by s.weight desc\n","```\n","\n","Вопрос 2: Сколько различных производителей грузовиков перечислено в таблице truck?\n","\n","```sql\n","select count(distinct make)\n","from sql.truck*/\n","```\n","\n","Вопрос 3:  Как зовут водителя (first_name), который совершил наибольшее количество доставок одному клиенту?\n","\n","```sql\n","select\n","    count(*) as count_delivers,\n","    first_name,\n","    cust_id\n","from sql.shipment as s\n","     join sql.driver as d on s.driver_id = d.driver_id\n","group by d.driver_id, s.cust_id\n","order by count_delivers desc\n","```\n","\n","Вопрос 4:  Укажите даты первой и последней по времени доставок в таблице shipment.\n","\n","```sql\n","select min(ship_date),\n","max(ship_date)\n","from sql.shipment\n","```\n","\n","Вопрос 5:  Укажите имя клиента, получившего наибольшее количество доставок за 2017 год.\n","\n","```sql\n","select\n","    count(*) as count_delivers,\n","    cust_name\n","from sql.shipment as s\n","     join sql.customer as c on c.cust_id = s.cust_id\n","where ship_date between '01-01-2017' and '12-31-2017'\n","group by c.cust_id\n","order by count_delivers desc\n","```\n","\n","## 2. UNION\n","### ПРИНЦИП И УСЛОВИЯ РАБОТЫ UNION\n","\n","Допустим, мы хотим собрать из справочников по книгам и фильмам один, так чтобы в нём содержались названия произведений, а также их описание — книга или фильм.\n","\n","Для этого напишем простой запрос:\n","\n","```sql\n","SELECT          book_name object_name, 'книга' object_description\n","FROM          public.books\n","UNION ALL\n","SELECT          movie_title, 'фильм'\n","FROM          sql.kinopoisk\n","```\n","\n","Визуально произведённое нами действие можно представить следующим образом:\n","![](https://lms-cdn.skillfactory.ru/assets/courseware/v1/7e7950b737303d748fd0b38616e377d8/asset-v1:SkillFactory+DST-3.0+28FEB2021+type@asset+block/dst3-u2-md4_2_1.png)\n","\n","В запросе мы использовали оператор UNION ALL — он присоединяет любой результат запроса к другому «снизу» при условии, что у них одинаковая структура, а именно:\n","\n","* одинаковый тип данных;\n","* одинаковое количество столбцов;\n","* одинаковый порядок столбцов согласно типу данных.\n","\n","### ВИДЫ UNION\n","\n","Оператор присоединения существует в двух вариантах:\n","\n","* UNION выводит только уникальные записи;\n","* UNION ALL присоединяет все строки последующих таблиц к предыдущим, без ограничений по уникальности.\n","\n","UNION оставляет только уникальные значения, а потому требует дополнительных вычислительных мощностей и памяти (в данном случае можно провести аналогию с DISTINCT). Поэтому если вы уверены в отсутствии дубликатов в данных или они вам не важны, предпочтительнее использовать UNION ALL.\n","\n","### СИНТАКСИС\n","Запрос строится по следующей схеме:\n","\n","```sql\n","SELECT         n columns\n","FROM\n","         table_1\n","UNION ALL\n","SELECT\n","         n columns\n","FROM\n","         table_2\n","...\n","UNION ALL\n","SELECT\n","         n columns\n","FROM\n","         table_n\n","```\n","\n","Результатом выполнения такого запроса будут строки table_1, table_2, ..., table_n, соединённые одни под другими и выведенные в единой выдаче.\n","\n","Важно! Названия итоговых колонок в выводе будут такие же, как в первом блоке SELECT, даже если они отличаются в других блоках подзапросов.\n","\n","```sql\n","\n","SELECT\n","         c.city_id object_name, 'id города' object_type\n","FROM\n","         sql.city c\n","UNION ALL\n","SELECT\n","         d.driver_id other_name, 'id водителя' other_type\n","FROM\n","         sql.driver d\n","UNION ALL\n","SELECT\n","         s.ship_id, 'id доставки'\n","FROM\n","         sql.shipment s\n","UNION ALL\n","SELECT\n","         c.cust_id, 'id клиента'\n","FROM\n","         sql.customer c\n","UNION ALL\n","SELECT\n","         t.truck_id, 'id грузовика'\n","FROM\n","         sql.truck t\n","ORDER BY 1\n","\n","```\n","\n","Другая особенность — в применении сортировки ORDER BY: она всегда будет относиться к итоговому результату всего запроса с UNION ALL.\n","\n","\n","Обратите внимание! Несмотря на исходные названия колонок other_name и other_type во втором подзапросе, в выводе мы получим названия, которые дали в первом блоке: object_name и object_type.\n","\n","В случаях, когда необходимо применить команду ORDER BY или LIMIT не к итоговому результату, а к каждой части запроса, можно обернуть подзапросы в скобки.\n","\n","Для сортировки каждой отдельной части запроса используем скобки:\n","(SELECT book_name object_name, 'книга' object_descritption\n","FROM public.books\n","ORDER BY 1\n","LIMIT 1)\n","UNION ALL\n","(SELECT movie_title, 'фильм'\n","FROM sql.kinopoisk\n","ORDER BY 1\n","LIMIT 1)\n","\n","## 3. UNION и ограничение типов данных\n","\n","### ПОЧЕМУ ТАК ВАЖЕН ТИП ДАННЫХ?\n","\n","Как мы уже знаем, UNION может быть использован только в случае полного соответствия столбцов и их типов в объединяемых запросах.\n","\n","Допустим, мы хотим вывести список всех id городов и их названий в одном столбце.\n","\n","Вместо результата вы получите сообщение об ошибке: \"ERROR: UNION types integer and text cannot be matched\". Дело в том, что мы попытались объединить числовой и строковый типы в одной колонке, а это невозможно.\n","\n","Если мы всё же хотим выполнить поставленную задачу, придётся привести оба столбца к одному типу данных. Не каждый текст может быть приведён к числу, зато каждое число может быть представлено в текстовом формате.\n","\n","Для типизации в Postgres составляется запрос по модели\n","```sql\n","column_name::column_type\n","```\n","\n","Таким образом, чтобы перевести city_id в текст, нам потребуется написать\n","\n","```sql\n","city_id::text\n","```\n","Важно! Любой тип данных может быть приведён к текстовому формату — эту возможность целесообразно использовать для соединения разнородных сущностей. Главное — помнить, что сортировка текста отличается от сортировки чисел и дат.\n","\n","Немного подправим запрос, чтобы получить желаемый результат.\n","\n","```sql\n","SELECT\n","         c.city_id::text\n","FROM\n","         sql.city c\n","UNION ALL\n","SELECT\n","         cc.city_name\n","FROM\n","         sql.city cc\n","```\n","\n","Задание:\n","Напишите запрос, который объединит в себе все почтовые индексы водителей и их телефоны в единый столбец-справочник contact. Также добавьте столбец с именем водителя first_name и столбец contact_type с типом контакта (phone или zip в зависимости от типа). Отсортируйте список по столбцу с контактными данными в порядке возрастания, а затем — по имени водителя.\n","\n","Решение:\n","```sql\n","SELECT\n","    d.zip_code::text \"contact\", d.first_name, 'zip' \"contact_type\"\n","FROM\n","    sql.driver as d\n","\n","union\n","\n","SELECT\n","    d.phone::text \"contact\", d.first_name, 'phone' \"contact_type\"\n","FROM\n","    sql.driver as d\n","    \n","order by contact asc, first_name asc\n","```\n","\n","## 4. UNION ALL и промежуточные итоги\n","### Возможности UNION\n","\n","Помимо соединения разнородных сущностей в единый справочник, UNION ALL часто используется для __подведения промежуточных итогов и выведения результатов агрегатных функций.__\n","\n","Кроме агрегатных функций, в запросах с UNION могут использоваться функции группировки и выборки.\n","\n","\n","Попробуем вывести обобщённые данные о населении по всем городам, с детализацией до конкретного города:\n","```sql\n","SELECT\n","         c.city_name,\n","         c.population\n","FROM\n","         sql.city c\n","UNION ALL\n","SELECT\n","         'total',\n","         SUM(c.population)\n","FROM\n","         sql.city c\n","ORDER BY 2 DESC\n","\n","```\n","\n","## 5. UNION и дополнительные условия\n","\n","UNION также может быть использован для разделения существующей выборки по критерию «выполнение определённого условия».\n","\n","Например, с помощью UNION можно отобразить, у кого из водителей заполнен столбец с номером телефона.\n","\n","```sql\n","SELECT\n","         d.first_name,\n","         d.last_name,\n","         'телефон заполнен' phone_info\n","FROM\n","         sql.driver d\n","WHERE d.phone IS NOT NULL\n","\n","UNION\n","\n","SELECT\n","         d.first_name,\n","         d.last_name,\n","         'телефон не заполнен' phone_info\n","FROM\n","         sql.driver d\n","WHERE d.phone IS NULL\n","\n","```\n","При этом стоит учитывать, что каждый WHERE влияет только на свою часть выборки, а не на всю выборку.\n","\n","Пример задания с решением:\n","\n","*Напишите запрос, который выведет все города и штаты, в которых они расположены, а также информацию о том, была ли осуществлена доставка в этот город: если в город была осуществлена доставка, то выводим 'доставка осуществлялась'; если нет — выводим 'доставка не осуществлялась'. Столбцы к выводу: city_name, state, shipping_status. Отсортируйте в алфавитном порядке по городу, а затем — по штату.*\n","\n","Решение:\n","\n","```sql\n","SELECT\n","    c.city_name, c.state, 'доставка осуществлялась' \"shipping_status\"\n","from sql.city as c\n","    left join sql.shipment as s on s.city_id = c.city_id\n","where s.ship_id is not null\n","\n","union\n","\n","SELECT\n","    c.city_name, c.state, 'доставка не осуществлялась' \"shipping_status\"\n","from sql.city as c\n","    left join sql.shipment as s on s.city_id = c.city_id\n","where s.ship_id is null\n","\n","order by city_name asc, state asc\n","```\n","\n","Другой пример:\n","\n","*Напишите запрос, который выводит два столбца: city_name и shippings_fake. Выведите города, куда совершались доставки. Пусть первый столбец содержит название города, а второй формируется так: если в городе было более десяти доставок, вывести количество доставок в этот город как есть; иначе — вывести количество доставок, увеличенное на пять.Отсортируйте по убыванию получившегося «нечестного» количества доставок, а затем — по имени в алфавитном порядке.*\n","\n","Решение:\n","\n","```sql\n","SELECT\n","    c.city_name, count(*) \"shippings_fake\"\n","from sql.city as c\n","    join sql.shipment as s on s.city_id = c.city_id\n","group by c.city_id\n","having count(*) > 10\n","\n","union\n","\n","SELECT\n","    c.city_name, count(*)+5 \"shippings_fake\"\n","from sql.city as c\n","    join sql.shipment as s on s.city_id = c.city_id\n","group by c.city_id\n","having count(*) <= 10\n","\n","order by shippings_fake desc, city_name asc\n","```\n","\n","## 6. UNION и ручная генерация\n","\n","UNION можно использовать для создания справочников прямо в коде запроса. К примеру, если мы хотим вручную ввести какие-то значения и произвести с ними некоторые манипуляции или дополнить существующую выдачу своими значениями.\n","\n","Составим запрос, который позволит вывести первые три буквы алфавита и их порядковые номера.\n","\n","```sql\n","SELECT\n","         'a' letter,'1' ordinal_position\n","UNION\n","SELECT\n","         'b','2'\n","UNION\n","SELECT\n","         'c','3'\n","```\n","\n","__Существуют сложные алгоритмы сравнения текстовых значений, но главный смысл сводится к одному: сравнение производится на основе таблицы unicode и позиции элемента в ней с учётом определённых условий.__\n","\n","\n","## 7. EXCEPT\n","### Исключаем повторяющиеся данные\n","\n","Предположим, нам нужно узнать, в какие города осуществлялась доставка, за исключением тех, в которых проживают водители.\n","\n","\n","```sql\n","SELECT\n","         c.city_name\n","FROM\n","         sql.shipment s\n","JOIN sql.city c ON s.city_id = c.city_id\n","EXCEPT\n","SELECT\n","         cc.city_name\n","FROM\n","         sql.driver d\n","JOIN sql.city cc ON d.city_id=cc.city_id\n","ORDER BY 1\n","```\n","\n","Все водители проживают в городе Memphis, и мы видим, что он не выводится в результате запроса. Для решения этой задачи мы использовали оператор EXCEPT.\n","\n","![image](https://lms-cdn.skillfactory.ru/assets/courseware/v1/fd51ef1b05d2fdc6f1c2e860cffb4cd7/asset-v1:SkillFactory+DST-3.0+28FEB2021+type@asset+block/dst3-u2-md4_7_1.png)\n","\n","Синтаксические правила для оператора EXCEPT такие же, как и для UNION:\n","\n","* одинаковый тип данных;\n","* одинаковое количество столбцов;\n","* одинаковый порядок столбцов согласно типу данных.\n","\n","Синтаксис имеет следующий вид:\n","\n","```sql\n","SELECT\n","         n columns\n","FROM\n","         table_1\n","EXCEPT\n","SELECT\n","         n columns\n","FROM\n","         table_2\n","```\n","\n","Мы уже знаем, как решить такую задачу с использованием LEFT JOIN. Вариант с EXCEPT будет полезен в тех случаях, когда у вас много столбцов и вам не хочется прописывать их равенство в условии для JOIN.\n","\n","## 8. INTERSECT\n","### ВЫБИРАЕМ ОБЩИЕ ДАННЫЕ\n","\n","А что если нам надо вывести общие записи — те, что существуют в нескольких таблицах?\n","\n","Предположим, нам надо вывести совпадающие по названию города и штаты.\n","\n","```sql\n","SELECT          c.city_name object_name\n","FROM          sql.city c\n","INTERSECT\n","SELECT\n","         cc.state\n","FROM          sql.city cc\n","ORDER BY 1\n","```\n","\n","Как видим, с помощью оператора __INTERSECT__ мы вывели названия городов и штатов, которые совпадают: New York, Washington и Wyoming.\n","\n","![image](https://lms-cdn.skillfactory.ru/assets/courseware/v1/5c4422f466caff0a493c3ec664658ae8/asset-v1:SkillFactory+DST-3.0+28FEB2021+type@asset+block/dst3-u2-md4_8_1.png)\n","\n","Синтаксис запроса с оператором INTERSECT выглядит следующим образом:\n","\n","```sql\n","SELECT\n","         n columns\n","FROM\n","         table_1\n","INTERSECT\n","SELECT\n","         n columns\n","FROM\n","         table_2\n","```\n","\n","__Как EXCEPT, так и INTERSECT убирают дубликаты, если они имеются.__\n","\n","## 9. Итоги, закрепление знаний\n","\n","В этом модуле вы освоили ещё несколько возможностей из функционала SQL.\n","\n","Теперь вы умеете:\n","\n","* присоединять таблицы «снизу», одну под другой;\n","* исключать или, наоборот, выбирать повторяющиеся записи из двух таблиц;\n","* вручную добавлять записи в таблицу.\n","\n","Запишем структуру запроса с учётом полученных знаний.\n","\n","```sql\n","SELECT          N columns\n","FROM          table_1\n","UNION / UNION ALL / EXCEPT / INTERSECT\n","SELECT          N columns\n","FROM          table_2\n","```\n","Вопросы с собеседований:\n","*Соединение* - это увеличение таблицы в ширину (join), а *объедиинение* - увеличение таблицы в высоту (union). Если одна из таблиц пустая, то при использовании union мы просто получим первую таблицу со значениями (наоборот также работает). Если таблицы пустые, то при их объединении мы просто получим null. Union не может негативно повлиять на таблицу, он может либо сделать ее больше в высоту, либо оставить прежней.\n","\n","### И ЭТО ЕЩЁ НЕ ВСЁ!\n","\n","Знания по темам этого модуля зачастую проверяют работодатели на собеседованиях. Предлагаем вам ознакомиться с вопросами, с которыми вы можете столкнуться при поиске работы.\n","\n","Мы подготовили отдельный курс с практическими заданиями по SQL: они составлены так, чтобы максимально приблизить вас к реальным задачам. Список заданий пополняется каждый месяц, присоединиться можно в любой момент.\n","\n","Чтобы записаться на курс, достаточно заполнить [форму](https://docs.google.com/forms/d/e/1FAIpQLSc5zmvFYZHQT_sYoTG3g1GUAVn9rgir1dSL1jLZfJlay1UKjQ/viewform).\n","\n"],"metadata":{"id":"L5h-h4PGHLLT"}}]}