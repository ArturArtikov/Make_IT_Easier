{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOcxhybcrsN61EOnS1JGPjk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# SQL-0. Привет, SQL!\n","\n","## 1. Что такое базы данных?\n","\n","__Что такое базы данных?__\n","\n","Если данных становится достаточно много, для их хранения используют базы данных (БД).\n","\n","База данных — это организованная структура для хранения, изменения и обработки взаимосвязанной информации.\n","\n","Базы данных можно разделить на два вида:\n","\n","* Реляционные. В таких БД данные хранятся в виде связанных таблиц. В этом курсе мы сфокусируемся именно на реляционных БД.\n","* Нереляционные. Такие БД имеют специфическую структуру: например, данные хранятся в формате ключ-значение или в виде дерева.\n","\n","Подробнее о видах баз данных можно прочитать [здесь](https://tproger.ru/translations/sql-nosql-database-models/).\n","\n","\n","### Хранение данных в БД\n","\n","Данные в реляционных БД хранятся в виде таблиц. Каждая таблица обычно содержит данные, относящиеся к похожим объектам. У каждой таблицы есть название: оно соотносится с тем, какая информация хранится в таблице.\n","\n","Таблицы в БД состоят из строк и столбцов. Каждый столбец имеет своё уникальное название, которое также отмечает вид хранимой в нём информации. В каждой строке хранится информация об одном объекте.\n","\n","Таблица содержит определённое число столбцов, но может иметь любое количество строк.\n","\n","Для связи данных в разных таблицах часто используют ID — уникальный идентификатор какой-либо строки. Имя или какой-либо признак с этой целью не используются, поскольку они могут быть неуникальными.\n","\n","### СИСТЕМЫ УПРАВЛЕНИЯ БАЗАМИ ДАННЫХ\n","\n","Система управления базами данных, или СУБД (от англ. DataBase Management System, DBMS) — это комплекс программных средств, необходимых для создания структуры новой базы, её наполнения, редактирования содержимого и отображения информации.\n","\n","Существует множество СУБД, наиболее распространённые из них — MySQL, PostgreSQL, Oracle, Microsoft SQL Server. Для очень большого объёма данных также используют ClickHouse, Hadoop и др.\n","\n","В рамках курса мы будем использовать PostgreSQL 11 версии. За дополнительной информацией по учебным материалам вы всегда можете обращаться к [англоязычной](https://www.postgresql.org/docs/11/index.html) или [русскоязычной](https://postgrespro.ru/docs/postgresql/11/index.html) версиям документации.\n","\n","Для работы с данными, хранящимися в БД, используется специальный язык — SQL, который мы и будем изучать. Для работы с разными СУБД используются разные диалекты SQL."],"metadata":{"id":"nCIQ-3F-yL0M"}},{"cell_type":"markdown","source":["## Что такое SQL?\n","\n","Как вы уже знаете, для взаимодействия с базами данных через СУБД часто используется язык SQL (Structured Query Language). Он применяется для создания, модификации и управления данными.\n","\n","С его помощью составляются __запросы__ — своего рода вопросы, которые мы задаём, чтобы получить некоторую информацию о данных, хранящихся в БД.\n","\n","SQL-запрос представляет собой совокупность операторов, инструкций, вычисляемых функций.\n","\n","### ВИДЫ ОПЕРАТОРОВ SQL\n","\n","Операторы SQL делятся на:\n","\n","* __операторы определения данных (Data Definition Language, DDL)__ — с их помощью создаются и изменяются объекты в БД (сама БД, таблицы, функции, процедуры, пользователи и т. д.);\n","* __операторы манипуляции данными (Data Manipulation Language, DML)__ — с их помощью проводятся манипуляции с данными в таблицах;\n","* __операторы определения доступа к данным (Data Control Language, DCL)__ — с их помощью, как следует из названия, создаются и изменяются разрешения на определённые операции с объектами в БД;\n","* __операторы управления транзакциями (Transaction Control Language, TCL)__ — с их помощью осуществляется комплекс определённых действий, причём так, что либо все эти действия выполняются успешно, либо ни одно из них не выполняется вообще.\n","\n","Мы будем изучать только DML-операторы (для манипуляций с данными), а конкретнее — оператор SELECT, который позволяет выбрать из БД интересующие нас данные.\n","\n","### 3. Что такое Metabase?\n","\n","Для написания запросов к БД необходим специальный инструмент. Это может быть терминал в ОС, специализированная программа (например, одна из распространённых — DataGrip) или веб-сервис. Именно такой веб-сервис мы будем использовать.\n","\n","Metabase — это бесплатный и удобный инструмент для первичного анализа данных с возможностью передавать запросы.\n","\n","Сервис позволяет, например, визуализировать отчёты и объединять их в дашборды, но в нашем курсе мы не будем изучать эту тему.\n","\n","Чтобы начать работу с Metabase, перейдите по [ссылке](http://sql.skillfactory.ru:3000/) и подключитесь к учебному аккаунту.\n","\n","### Как написать запрос к БД?\n","\n","Чтобы писать запросы к БД, в правом верхнем углу нажмите на кнопку Cоздать запрос и выберите Прямой запрос справа.\n","\n","Metabase позволяет создавать запросы в собственном конструкторе, но мы будем работать только в редакторе SQL-запросов.\n","\n","В основном окне редактора, сверху, вы будете писать запросы, ниже  — увидите результат вашего запроса. Справа с помощью кнопки-«книжки» можно изучить содержимое таблиц в БД."],"metadata":{"id":"Xml3rX_40O8Y"}},{"cell_type":"markdown","source":["# SQL-1. Основы SQL\n","\n","## 1. Получаем все данные из таблицы\n","\n","Для импорта библиотеки используем:\n","\n","__SELECT *__\n","\n","__FROM sql.kinopoisk__\n","\n","\n","Обратите внимание! Metabase выводит только первые 2 000 строк: в нашем случае таблица полностью уместилась в выводе.\n","\n","\n","При этом отображена только часть вывода, поскольку не все строки и столбцы влезли на экран. Вы можете увидеть всё содержимое таблицы, прокрутив страницу по вертикали и горизонтали.\n","\n","Что ещё мы видим? Числа отображаются в американском формате (с десятичным разделителем — точкой и разделителем разрядов — запятой).\n","\n","__Теперь давайте разберём запрос, благодаря которому мы получили такой результат.__\n","\n","__Оператор SELECT сообщает СУБД, что вы хотите извлечь из неё данные. SELECT лежит в основе любого SQL-запроса к БД.__\n","\n","__FROM sql.kinopoisk сообщает, из какой таблицы извлекаются данные. Сначала указывается название схемы, в которой содержится таблица (в нашем случае — это sql), а после точки — название самой таблицы (kinopoisk).__\n","\n","__Звёздочка * указывает, что вы хотите видеть все столбцы этой таблицы.__\n","\n","Если же вам нужны не все столбцы, а только некоторые, вместо звёздочки перечислите названия всех интересующих вас столбцов через запятую.\n","\n","Важно! SQL нечувствителен к регистру, поэтому ключевые слова можно писать хоть строчными, хоть прописными буквами: SELECT, select или SeLeCt.\n","\n","Независимо от того, в каком порядке представлены столбцы в таблице, в запросе вы можете указывать их в любой очерёдности.\n","\n","Порядок столбцов в выводе будет совпадать с их расположением после оператора SELECT.\n","\n","__Проведём несколько математических операций с нашим выводом.__\n","\n","Допустим, вы хотите написать запрос, аналогичный запросу из задания, только вместо года выхода фильма, вам нужен его «возраст» на 2020 год.\n","\n","В таком случае наш запрос будет выглядеть так:\n","\n","```\n","SELECT\n","    movie_title,\n","    2020 - year,\n","    rating\n","FROM sql.kinopoisk\n","```\n","\n","То есть мы отняли от 2020 года год выхода фильма и получили его возраст! Элементарно!\n","\n","__ЧТО МЫ ВИДИМ?__\n","\n","Столбец с вычислениями в выводе называется ?column?, потому что Metabase не смог подобрать для него название.\n","\n","Давайте наведём порядок и переименуем столбец!\n","Для этого используем ключевое слово AS и поставим после него новое имя difference. Можем повторить этот процесс для каждого столбца.\n","\n","Алиас — имя, назначенное источнику данных в запросе при использовании выражения в качестве источника данных или для упрощения ввода и прочтения инструкции SQL.\n","\n","Новое имя является просто псевдонимом, или алиасом, — оно временное и не меняет реального имени столбца в базе данных. Алиас влияет только на то, как столбец отображается в выводе конкретного запроса.\n","\n","Алиасом может быть как одно слово, так и несколько, а его написание — как латиницей, так и кириллицей.\n","\n","Обратите внимание! Если в алиасе используются пробелы, необходимо заключать весь псевдоним в двойные кавычки, например, movie_title AS \"Movie Title\".\n","\n","Будьте внимательны! При выполнении заданий в рамках курса используйте алиасы аккуратно. Если в задаче не указано, какое имя нужно присвоить столбцу, значит, его нужно выводить под тем же названием, что дано ему в таблице.\n","\n","### ПРОСТЫЕ ОПЕРАЦИИ С ДАННЫМИ\n","\n","Со столбцами, которые содержат числовые данные, можно проводить арифметические операции:\n","\n","* сложение с помощью + ;\n","* вычитание с помощью - (этот тип операции вы уже проводили, когда определяли «возраст» фильма);\n","* умножение с помощью * ;\n","* деление с помощью / ;\n","\n","Важно! Если и числитель, и знаменатель — целые числа, результат деления также будет целочисленным, то есть этот оператор произведёт деление нацело.\n","\n","* получение остатка от деления с помощью % .\n","\n","С полным перечнем доступных арифметических операций вы можете ознакомиться в [официальной документации](https://postgrespro.ru/docs/postgresql/11/functions-math).\n","\n","Давайте выведем для каждого фильма результат деления года его выпуска на рейтинг (что бы это ни значило :)).\n","\n","```\n","SELECT\n","    movie_title,\n","    year / rating\n","FROM sql.kinopoisk\n","```\n","\n","## 2. Фильтруем строки\n","### Where\n","\n","Мы уже знаем, что делать, если нам нужны лишь несколько столбцов из таблицы.\n","\n","Но как быть, если мы хотим видеть не все строки, а только некоторые из них?\n","\n","В таком случае нам пригодится ключевое слово WHERE. Получим для примера всю информации о фильме, занимающем первую позицию.\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE position = 1\n","```\n","\n","В запросах выше мы использовали знак равно (=), но никто не запретит нам использовать и условные операторы.\n","\n","Вы можете применять знаки < (меньше), <= (меньше или равно), > (больше), >= (больше или равно).\n","\n","Ещё один условный оператор, который нам доступен, — знак неравенства != или <>.\n","\n","Допустим, одного условия нам мало. В таком случае мы можем комбинировать их с помощью AND и OR.\n","\n","Теперь вы хотите получить информацию о фильмах, которые вышли между 1975 и 1985 годами включительно. Можно воспользоваться следующим запросом:\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE year >= 1975\n","    AND year <= 1985\n","```\n","\n","\n","### Between\n","\n","Мы только что отправили запрос для вывода данных по фильмам с 1975 и 1985 годы. Цели мы достигли, но сама запись оставляет желать лучшего. Можем оптимизировать её, сделав более элегантной с помощью BETWEEN:\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE year BETWEEN 1975 AND 1985\n","```\n","\n","Если вы знаете английский, назначение BETWEEN не станет для вас неожиданностью: оператор фильтрует строки, которые находятся между двумя значениями.\n","\n","__Обратите внимание! В PostgreSQL указанные значения включаются в интервал. В других СУБД BETWEEN может работать иначе и не включать указанные значения.__\n","\n","### NOT\n","\n","В дополнение к другим операторам можно использовать ключевое слово NOT — оно «переворачивает» следующий за ним оператор.\n","\n","Выведем все фильмы, кроме тех, что вышли с 1965 по 1980 годы.\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE year NOT BETWEEN 1965 AND 1980\n","```\n","\n","Если включаете в запрос несколько условий AND и OR, используйте скобки: они работают так же, как и с арифметическими операциями. Важно! Условия в скобках имеют больший приоритет.\n","\n","### IN\n","Ещё один полезный оператор для фильтрации строк — IN. Конструкции с IN имеют следующий вид:\n","\n","```\n","column IN (value1, value2, value3)\n","```\n","\n","Эта запись аналогична следующей: column = value1 OR column = value2 OR column = value3 — но выглядит проще и компактнее.\n","\n","\n","До этого при работе с WHERE мы использовали только числа, но мы можем проводить манипуляции и c данными типа текст. __Обратите внимание! Текстовые значения обязательно должны заключаться в одинарные кавычки.__\n","\n","Давайте получим информацию о всех фильмах Леонида Гайдая.\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE director = 'Леонид Гайдай'\n","```\n","\n","Попробуйте изменить условие на director = 'ЛЕОНИД ГАЙДАЙ'. __Как видите, ничего не отобразилось, потому что в текстовых полях важен регистр.__\n","\n","### LIKE\n","\n","Предположим, мы не знаем точно, какое текстовое значение ищем. В таком случае нам поможет оператор LIKE.\n","\n","Например, чтобы получить все фильмы, название которых начинается на А (кириллическую), мы воспользуемся таким запросом:\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","WHERE movie_title LIKE 'А%'\n","```\n","\n","__Знак процента (%) в примере показывает, что после A встречается ноль и более символов. Вы можете использовать % в любом месте внутри строки. Например, movie_title LIKE '%а%б%' выведет все фильмы, в названии которых встречается строчная буква а, а где-то после неё — б. Также в текстовых строках используется знак подчёркивания (_) — он заменяет ровно один любой символ.__\n","\n","### NULL\n","\n","Вернёмся к просмотру всей таблицы с ТОП-250.Вы можете заметить, что у некоторых строк заполнены не все столбцы. Для пустых значений есть специальное обозначение — NULL. При этом вы не можете просто приравнять значение к NULL. Проверим это на следующем запросе:\n","\n","```\n","SELECT *   /*НЕВЕРНО !*/\n","FROM sql.kinopoisk\n","WHERE overview = NULL\n","```\n","\n","А теперь попробуйте изменить условие на overview IS NULL. Вы можете добавить к условию уже изученное ключевое слово NOT, чтобы получилось overview IS NOT NULL, тогда в выводе вы увидите только фильмы с заполненным описанием.\n","\n","```\n","SELECT *    /*А вот так, правильно!*/\n","FROM sql.kinopoisk\n","WHERE overview is NULL\n","```\n","\n","__Важно! NULL — это специальное значение. Если вы фильтруете столбец, в котором есть пустые значения, по любому условию, кроме IS NULL / IS NOT NULL, такие значения будут исключены из вывода.__\n","\n","\n","## 3. Сортировка\n","### ORDER BY\n","\n","Когда мы говорили о последовательности столбцов в выводе, вы, вероятно, задались вопросом: «А в каком порядке выводятся строки?»\n","\n","Порядок вывода строк может задаваться в настройках базы данных для каждой таблицы. Более того, этот порядок может быть не задан, и тогда от вывода к выводу он будет разным.\n","\n","Чтобы задать порядок вывода строк в запросе, применим новое ключевое слово __ORDER BY__.\n","\n","Для примера отсортируем фильмы по их названию в алфавитном порядке.\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","ORDER BY movie_title\n","```\n","\n","Как видите, сортировка по возрастанию проводится по умолчанию. Наш запрос с сортировкой по названию аналогичен такому:\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","ORDER BY rating ASC\n","\n","```\n","\n","__Здесь ASC — явное указание порядка сортировки по возрастанию (англ. ascending).Для обратного порядка используется ключевое слово DESC (англ. descending). Разумеется, мы можем комбинировать в нашем запросе фильтрацию строк и сортировку вывода, а также выводить только необходимые столбцы.__\n","\n","\n","Выведем названия, имена режиссёров и сценаристов, а также год выхода в прокат фильмов, выпущенных в СССР, и отсортируем результат по убыванию рейтинга.\n","\n","```\n","SELECT\n","    movie_title,\n","    director,\n","    screenwriter,\n","    year\n","FROM sql.kinopoisk\n","WHERE country = 'СССР'\n","ORDER BY rating DESC\n","```\n","\n","__Обратите внимание! Ключевое слово ORDER BY идёт после применения всех условий в WHERE.__\n","\n","Также в ORDER BY можно указывать, где должны идти пустые значения — в начале или в конце. Такая настройка порядка вывода задаётся с помощью ключевых слов NULLS FIRST / NULLS LAST.\n","\n","Вы можете сортировать вывод по нескольким столбцам, просто указав их через запятую в ORDER BY (порядок сортировки указывается отдельно для каждого столбца). Кроме того, вы можете сортировать результат запроса и по тем столбцам, которых нет в выводе.\n","\n","Получили список всех режиссёров и фильмов из ТОП-250, отсортированных по году выхода в прокат, а внутри года — по рейтингу в порядке убывания.\n","\n","```\n","SELECT\n","    director,\n","    movie_title\n","FROM sql.kinopoisk\n","ORDER BY year, rating DESC\n","```\n","\n","Для упрощения работы с ORDER BY можно использовать не названия столбцов, а их номера из вывода.\n","\n","```\n","SELECT\n","    director,\n","    movie_title,\n","    year\n","FROM sql.kinopoisk\n","ORDER BY 1, 3 DESC\n","```\n","\n","Сортировку по номеру столбца стоит использовать с осторожностью, поскольку при изменении вывода в SELECT всё может сбиться.При добавлении новых столбцов в SELECT нужно проверить и при необходимости поправить номера столбцов в ORDER BY.\n","\n","\n","## 4. Ограничение вывода\n","\n","### LIMIT\n","\n","По умолчанию при любом запросе вы получаете в выводе все строки, попадающие под условия запроса. Чаще всего именно этого вы и ожидаете, но иногда, например, вам нужно просто взглянуть на содержание таблицы, при этом чем она она больше, тем дольше будет работать запрос.\n","\n","Ограничим вывод первыми десятью строками и сможем легко понять, какие данные хранятся в таблице, не утяжеляя результат.\n","\n","```\n","SELECT *\n","FROM sql.kinopoisk\n","LIMIT 10\n","```\n","\n","Ёщё один типичный случай использования ограничения вывода — вывод ТОПа по какому-то показателю.мВыведем ТОП-5 фильмов по рейтингу, сначала отсортировав их по убыванию, а потом оставив только верхние пять строк с помощью LIMIT.\n","\n","__Обратите внимание! Ключевое слово LIMIT используется в самом конце запроса.__\n","\n","### OFFSET\n","\n","Если LIMIT «оставляет» указанное число первых строк из вывода, то OFFSET, наоборот, «обрезает» указанное число первых строк.\n","\n","__LIMIT и OFFSET можно использовать вместе, их порядок не важен.__\n","\n","Выведем название и рейтинг фильмов с четвёртого по восьмое место.\n","\n","```\n","SELECT\n","    movie_title,\n","    rating\n","FROM sql.kinopoisk\n","ORDER BY rating DESC\n","OFFSET 3 LIMIT 5\n","```\n","\n","_Таким образом, LIMIT отсчитывает количество строк после указанной в OFFSET строки._\n","\n","## 5.Итоги\n","\n","Напоследок напомним структуру простого запроса:\n","```\n","SELECT\n","    столбец1 AS новое_название,\n","    столбец2,    столбец3\n","FROM таблица\n","WHERE (условие1 OR условие2)    AND условие3\n","ORDER BY сортировка1, сортировка2\n","OFFSET 1 LIMIT 2\n","```\n","\n","\n","\n"],"metadata":{"id":"TRSz2Shb3uwU"}}]}