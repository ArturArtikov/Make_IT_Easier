{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOD+WZ164H9NNMYlvatZbI2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# SQL-2. Агрегатные функции\n","\n","## 1. Знакомимся с данными\n","Агрегатные функции помогают вычислять сводные значения для группы строк.\n","\n","Присмотримся к содержимому таблицы sql.pokemon: в ней хранится информация о покемонах.\n","\n","id-уникальный идентификатор,\n","\n","name-имя,\n","\n","type1-основной тип,\n","\n","type2-дополнительный тип,\n","\n","hp-количество очков здоровья,\n","\n","attack-показатели атаки,\n","\n","defense-показатели защиты,\n","\n","speed-показатели скорости\n","\n","## 2. Убираем повторяющиеся значения\n","Для начала получим все основные типы покемонов\n","```sql\n","SELECT\n","    type1\n","FROM sql.pokemon\n","```\n","\n","Видно, что типы повторяются, потому что в результате запроса вы получаете все строки, которые подходят под заданные условия.\n","\n","Чтобы получить уникальные значения из столбца, воспользуемся ключевым словом __DISTINCT__.\n","\n","```sql\n","SELECT DISTINCT\n","    type1\n","FROM sql.pokemon\n","```\n","\n","Мы можем применять DISTINCT и для нескольких столбцов. Обратите внимание! DISTINCT пишется только один раз, в начале списка получаемых столбцов. То есть, если нужно вывести список из нескольких уникальных значений, например для типа 1 и типа 2, то код будет иметь следующий вид:\n","\n","```sql\n","select distinct type1, type2\n","from sql.pokemon\n","order by type1, type2 /* сразу же отсортируем по типам*/\n","```\n","\n","##  3. Агрегатные функции\n","\n","Кроме простых математических операций, которые мы использовали в предыдущем модуле, СУБД позволяет проводить статистические вычисления для нескольких строк.\n","\n","Давайте посчитаем количество строк в таблице. Для этого применим агрегатную функцию COUNT.\n","\n","```sql\n","select count(*)\n","from sql.pokemon\n","```\n","\n","COUNT считает строки, а звёздочка (*) в аргументе функции означает, что считаются все строки, которые возвращает запрос. Если в аргументе функции указать название столбца, функция обработает только строки с непустым значением.\n","\n","\n","Внутри функции COUNT мы можем также применять DISTINCT, чтобы вычислить количество уникальных значений.\n","\n","```sql\n","SELECT\n","    COUNT(DISTINCT type1)\n","FROM sql.pokemon\n","```\n","\n","### Основные агрегатные функции\n","\n","Основные агрегатные функции, с которыми нам предстоит работать:\n","* COUNT — вычисляет число непустых строк;\n","* SUM — вычисляет сумму;\n","* AVG — вычисляет среднее;\n","* MAX — вычисляет максимум;\n","* MIN — вычисляет минимум.\n","\n","__Разумеется, вы можете использовать в запросе фильтрацию строк с помощью WHERE, чтобы получить агрегированное значение только для отдельных строк.__\n","\n","Кроме того, мы можем применять несколько агрегатных функций в одном запросе.\n","\n","```sql\n","SELECT\n","    COUNT(*) AS \"всего травяных покемонов\",\n","    COUNT(type2) AS \"покемонов с дополнительным типом\",\n","    AVG(attack) AS \"средняя атака\",\n","    AVG(defense) AS \"средняя защита\"\n","FROM sql.pokemon\n","WHERE type1 = 'Grass'\n","```\n","\n","Поскольку агрегатные функции схлопывают таблицу до строк, то к строкам можно добавить названия, чтобы получить красивый вывод результатов.\n","\n","С полным перечнем существующих агрегатных функций вы можете ознакомиться в [официальной документации](https://postgrespro.ru/docs/postgrespro/11/functions-aggregate).\n","\n","## 4. Группировка\n","\n","GROUP BY используется для определения групп выходных строк, к которым могут применяться агрегатные функции.\n","\n","```sql\n","SELECT\n","    type1 AS pokemon_type,\n","    COUNT(*) AS pokemon_count\n","FROM sql.pokemon\n","GROUP BY type1\n","ORDER BY type1\n","```\n","\n","Представим ТОП существующих типов покемонов.\n","\n","```sql\n","SELECT\n","    type1 AS pokemon_type,\n","    COUNT(*) AS pokemon_count\n","FROM sql.pokemon\n","GROUP BY pokemon_type\n","ORDER BY COUNT(*) DESC\n","```\n","\n","Обратите внимание! Мы использовали в группировке не название столбца, а его алиас. Мы можем осуществлять группировку по нескольким столбцам.\n","\n","```sql\n","SELECT /*выбор*/\n","    type1 AS primary_type, /*столбец type1; присвоить алиас primary_type*/\n","    type2 AS additional_type, /*столбец type2; присвоить алиас additional_type*/\n","    COUNT(*) AS pokemon_count /*подсчёт всех строк присвоить алиас pokemon_count*/\n","FROM sql.pokemon /*из таблицы sql.pokemon*/\n","GROUP BY 1, 2 /*группировка по столбцам 1 и 2*/\n","ORDER BY 1, 2 NULLS FIRST /*сортировка по столбцам 1 и 2; сначала нули*/\n","```\n","\n","Обратите внимание! В группировке можно указывать порядковый номер столбца так же, как мы делали это в прошлом модуле для сортировки.\n","\n","GROUP BY можно использовать и без агрегатных функций. Тогда его действие будет равносильно действию DISTINCT. Например следующие запросы являются идентичными:\n","\n","```sql\n","SELECT\n","    type1\n","FROM sql.pokemon\n","GROUP BY type1\n","```\n","\n","```sql\n","SELECT DISTINCT\n","    type1\n","FROM sql.pokemon\n","```\n","\n","## 5. Фильтрация агрегированных строк\n","\n","Если ключевое слово WHERE определяет фильтрацию строк до агрегирования, то для фильтрации уже агрегированных данных применяется ключевое слово HAVING.\n","\n","Важно! HAVING обязательно пишется после GROUP BY.\n","\n","```sql\n","SELECT\n","    type1 AS primary_type,\n","    AVG(attack) AS avg_attack\n","FROM sql.pokemon\n","GROUP BY primary_type\n","HAVING AVG(attack) > 90\n","```\n","В HAVING вы можете использовать все те же условия, что и в WHERE.\n","\n","Об отличиях HAVING от WHERE можно прочитать в [официальной документации](https://postgrespro.ru/docs/postgresql/11/tutorial-agg).\n","\n","В общем виде синтаксис оператора SELECT, с учётом имеющихся на данный момент знаний, представляем следующим образом:\n","\n","```sql\n","SELECT [ALL | DISTINCT] список_столбцов|*\n","FROM список_имён_таблиц\n","[WHERE условие_поиска]\n","[GROUP BY список_имён_столбцов]\n","[HAVING условие_поиска]\n","[ORDER BY имя_столбца [ASC | DESC],…]\n","```\n","\n","## 6. Итоги\n","\n","Напомним структуру запроса, который мы можем составить с учётом новых знаний:\n","\n","```sql\n","SELECT\n","    столбец1 AS новое_название,\n","    столбец2,\n","    АГРЕГАТ(столбец3)\n","FROM таблица\n","WHERE (условие1 OR условие2)\n","    AND условие3\n","GROUP BY столбец1, столбец2\n","HAVING АГРЕГАТ(столбец3) > 5\n","ORDER BY сортировка1, сортировка2\n","OFFSET 1 LIMIT 2\n","```\n","\n"],"metadata":{"id":"KOF2uWcKSyjY"}}]}